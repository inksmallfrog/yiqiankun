TodoList:
	注册功能：在登录弹窗点击注册后的弹窗，仿照账户管理的登录界面
	切换界面功能：登录后的头像下拉单中（行情（默认）+策略+账户管理 + 登出功能）
	行情模块：时间搜索功能
	          分时图
	          加入自选股
	订单管理模块：文档说明
	账户管理模块：文档说明
	策略模块：全

	我来说明下改动，订单部分（右下角）添加了搜索栏和选定栏，搜索栏仅当切换到历史订单时候才显示，选定栏是点击相应订单时弹出，有撤销和查看两个按钮，已成交订单的撤销字是灰色的（无法选定），查看是链接到该股票/股指期货的行情。
    交易模块（左下角）添加了股指期货的购买选项，如图所示就好了，左侧是两者之间的切换
    补充第一个订单部分还加了个滚动轴
    账户管理界面是，上半部分是股票，下班部分是股指期货，如果没有添加账户可以点击添加账户那几个字，然后弹出信息录入框（psd文件里面有），登录完毕之后模块右上角会出现叉，点击即可注销（股票与股指期货各一个）。表格操作的话是点击代码，名称之类的会出现相应的排序


前后端数据：
	1、这里统一用了post方式
	2、后台无法提供的数据暂时以0填充
	3、细节：
		a、用户登录
			触发：未登录时点击用户头像，输入账号密码进行登录
			前端位置：User.js line:23
			 /*
     			  * 发送登录信息
		          * 发送目标：{root}/login
		          * 发送方式：post
		          * 发送内容：id => 用户id
		          *           pwd => 用户密码
		          * 返回格式：字符串
		          * 期待返回内容："succeed" => 登录成功
		          *             ："user_id_error" => 用户名错误
		          *             ："pwd_error" => 密码错误
		          */
			结果：设置cookie并刷新网页

		b、获取用户自选股
			触发：进入网页且用户已登录时
			前端位置：SelfStock.js line:23
    			/*
     			* 发送自选股列表请求
     			* 发送目标：{root}/selfstock
    			* 发送方式：post
			* 发送内容：id => 用户id
     			* 返回格式：json
     			* 期待返回内容：id => 股票id
     			*             ：code => 股票代码
     			*             ：name => 股票名称
     			*/
			结果：自选股列表显示于列表容器中

		c、添加自选股
			触发：点击添加自选股并选中某只股票后
			前端位置：SelfStock.js line:106
    			/*
     			* 发送添加自选股请求
     			* 发送目标：{root}/selfstockadd
     			* 发送方式：post
     			* 发送内容：user_id => 用户id
     			*           id => 股票id
     			* 返回：无
     			*/
			结果：自选股加入数据库

		d、删除自选股
			触发：点击自选股的删除按钮后
			前端位置：SelfStock.js line:129
    			/*
     			* 发送删除自选股请求
     			* 发送目标：{root}/selfstockdelete
     			* 发送方式：post
     			* 发送内容：user_id => 用户id
     			*           id => 股票id
     			* 返回：无
     			*/
			结果：自选股从数据库中移除

		e、获取股票实时数据
			触发：进入网页后，每隔固定时间后自动触发
			前端位置：Stock.js line:65
    			/*
                 * 发送股票详情请求
                 * 发送目标：{root}/getstockdata
                 * 发送方式：post
                 * 发送内容：id => 股票id
                 * 返回格式：json
                 * 期待返回内容：id => 股票id
                 *               code => 股票代码
                 *               name => 股票名称
                 *               abbr => 股票缩写
                 *               price => 当前价格
                 *               open => 开盘价
                 *               close => 收盘价
                 *               high => 最高价
                 *               low => 最低价
                 *               max => 涨停价
                 *               min => 跌停价
                 *               vol => 总量
                 *               value => 总额
                 *               marketvalue => 市值
                 *               available_marketvalue => 流通市值
                 *               bid5 => 卖5
                 *               bid5vol => 卖5量
                 *               bid4 => 卖4
                 *               bid4vol => 卖4量
                 *               bid3 => 卖3
                 *               bid3vol => 卖3量
                 *               bid2 => 卖2
                 *               bid2vol => 卖2量
                 *               bid1 => 卖1
                 *               bid1vol => 卖1 量
                 *               buy1 => 买1
                 *               buy1vol => 买1量
                 *               buy2 => 买2
                 *               buy2vol => 买2量
                 *               buy3 => 买3
                 *               buy3vol => 买3量
                 *               buy4 => 买4
                 *               buy4vol => 买4量
                 *               buy5 => 买5
                 *               buy5vol => 买5量
                 */
			结果：数据显示在相应的位置

		f、获取股票图表数据
			触发：进入网页后
			      修改图标类型时
		          分时图每隔固定时间后自动触发
			前端位置：Stock.js line:156
    			/*
     			* 发送股票图表请求
     			* 发送目标：{root}/getstockgraphdata
     			* 发送方式：post
    			* 发送内容：id => 股票id
     			*           type => 图表类型('graph-daily' => 日线; 'graph-weekly' => 周线; 'graph-monthly' => 月线'; 'graph-time' => '分时图')
     			* 返回格式：二维数组
     			* 期待返回内容：[时间，开盘，收盘，最低，最高]
     			*/
			结果：图表中显示正确的数据

		g、买入操作
		    触发：用户点击买入按钮
		    前端位置：Trade.js line:111
		        /*
                 * 发送买入请求
                 * 发送目标：{root}/trade
                 * 发送方式：post
                 * 发送内容：user_id => 用户id
                 *           id => 股票id
                 *           price => 价格
                 *           counts => 数量
                 *           type => 执行动作("buy" => 买入, "bid" => 卖出)
                 * 返回：无
                 */
            结果：买入请求加入订单数据库

        h、卖出操作
            触发：用户点击卖出按钮
            前端位置：Trade.js line:126
                /*
                 * 发送买入请求
                 * 发送目标：{root}/trade
                 * 发送方式：post
                 * 发送内容：user_id => 用户id
                 *           id => 股票id
                 *           price => 价格
                 *           counts => 数量
                 *           type => 执行动作("buy" => 买入, "bid" => 卖出)
                 * 返回：无
                 */
            结果：卖出请求加入订单数据库
